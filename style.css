* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  font-family: sans-serif;
  background-color: #fff;
  padding: 4.8rem 2.4rem;
}

.heading-secondary {
  font-size: 3.2rem;
  line-height: 1.2;
  text-align: center;
  font-weight: 700;
  line-height: 1.05;
  color: #333;
  margin-bottom: 6.4rem;
}

/**************************************/
/*icon section*/
/**************************************/

.icon-text {
  z-index: 1000; /* 他の要素より前面に出す */

  /* 1) 視覚的に隠す*/
  opacity: 0;

  /* 2) マウスとキーボードからアクセスできないようにする*/
  pointer-events: none;

  /* 3) スクリーンリーダを非表示にする*/
  visibility: hidden;
}
/*nav-open新しいクラスを作成する。アコーディオンの講座でもそのように行ったことがある。
JavaScriptを使って、追加・削除されるクラス。ナビゲーションが開いている時はいつでもヘッダー要素に(今回は、HTML上のheaderに新クラスを追加した）
nav-openが表示される。このようなコンポーネントを作る時はよく使われる手法。*/

.birth {
  margin-bottom: 4.8rem;
}

.nav-open .icon-text {
  opacity: 1;
  pointer-events: auto;
  visibility: visible;
  transform: translatex(0);
}

.nav-open .close-modal[name="close-outline"] {
  display: block;
}

.nav-open .open-modal[name="open-outline"] {
  display: none;
}

.address-area {
  display: grid;
  grid-template-columns: 1fr 1fr 2fr; /* 3列に分ける */
  gap: 2.4rem; /* 各項目の間に隙間を設定 */
}

.address-area div {
  display: flex;
  flex-direction: column; /* ラベルと入力フォームを縦に並べる */
}

/**************************************/
/*patient SECTION*/
/**************************************/

.container {
  max-width: 80rem;
  margin: 0 auto;
  padding: 2.4rem;
  background-color: #f9f9f9;
}

.cta-form {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr; /* 1段目の3列 */
  gap: 2.4rem;
}

.cta-form > div {
  display: flex;
  flex-direction: column; /* 各項目のラベルと入力を縦並びに */
}

.birth {
  grid-column: span 1; /* 生年月日を2列に渡るように設定 */
}

.peson {
  width: 6.4rem;
  height: 6.4rem;
  margin-left: 4.8rem;
}

input,
select,
textarea {
  padding: 1.2rem;
  font-size: 1.6rem;
  font-family: inherit;
  border: 1px solid #ccc;
  border-radius: 4px;
}

textarea {
  width: 100%;
  min-height: 8rem;
  padding: 1.2rem;
  font-size: 1.6rem;
  line-height: 1.4;
  border: 1px solid #ccc;
  border-radius: 4px;
  resize: vertical; /* 高さの調整だけをユーザーができる */
}

/**************************************/
/*diagnosis SECTION*/
/**************************************/

.diagnosis-section {
  font-size: 1.8rem;
  padding: 4.8rem 0;
  border-top: 2px solid #ddd;
}

.diagnosis-section div {
  margin-bottom: 2.4rem;
}

#date {
  margin-bottom: 2.4rem;
}

.alert-info {
  position: fixed;
  top: 2rem;
  right: 2rem;
  width: 25rem;
  background-color: #ffefef;
  color: #b30000;
  padding: 1.6rem;
  border: 1px solid #ffaaaa;
  border-radius: 8px;
  box-shadow: 0 0.4rem 1.2rem rgba(0, 0, 0, 0.1);
  font-size: 1.4rem;
  z-index: 1000;
}

.close-modal {
  display: flex;
  justify-content: center;
  align-items: center;
}

/**************************************/
/*btn*/
/**************************************/

.btn {
  display: inline-block; /*インライン要素にpaddingを効かせるためにインラインブロックを宣言*/
  font-weight: 600;

  text-decoration: none;
  font-size: 2rem;
  padding: 0.9rem 1.8rem; /*上下の値の2倍、左右の値を大きくすると綺麗に仕上がる*/
  border-radius: 9px;

  transition: all 0.3s; /*2つ以上の値の間をアニメーションで遷移させるプロパティ。
  　　　　　　　　　　　　　　　　　　　アニメーションさせたいプロパティを指定し、どのくらいの時間効かせるかを指示する*/

  /*Only necessary for .btn */
  cursor: pointer;
}
.button-container {
  text-align: center;
}

.btn:link,
.btn:visited {
  background-color: #007bff; /* 青系 */
  color: #fff; /* 白文字 */
  border: none; /* ボーダー無しですっきり */
}

.btn:hover,
.btn:active {
  background-color: #0056b3; /* 濃い青でホバー感 */
  transform: translateY(-2px); /* 少し浮くような感覚 */
}
